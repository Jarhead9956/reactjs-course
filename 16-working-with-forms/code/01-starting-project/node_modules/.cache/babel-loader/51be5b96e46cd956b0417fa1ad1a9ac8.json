{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ico\\\\Desktop\\\\Education\\\\UDEMY COURSES\\\\REACT-COURSE\\\\16-working-with-forms\\\\code\\\\01-starting-project\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport useInput from '../hooks/use-input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    inputValue: nameInputValue,\n    enteredValueIsValid: enteredNameIsValid,\n    inputIsInvalid: nameInputIsInvalid,\n    changeInputValueHandler: changeNameInputHandler,\n    inputBlurHandler: emailInputBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== '');\n  const {\n    inputValue: emailInputValue,\n    enteredValueIsValid: enteredEmailIsValid,\n    inputIsInvalid: emailInputIsInvalid,\n    changeInputValueHandler: changeEmailInputHandler,\n    inputBlurHandler: nameInputBlurHandler,\n    reset: resetEmailInput\n  } = useInput(value => value.match(/^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/)); // const [nameInputValue, setNameInputValue] = useState('')\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false)\n  // const [emailInputValue, setEmailInputValue] = useState('')\n  // const [enteredEmailTouched, setEnteredEmailTouched] = useState(false)\n  // const enteredNameIsValid = nameInputValue.trim() !== ''\n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched\n  // const enteredEmailIsValid = emailInputValue.match(/^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/)\n  // const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  } // const changeEmailInputHandler = (event) => {\n  //   setEmailInputValue(event.target.value)\n  // }\n  // const emailInputBlurHandler = (event) => {\n  //   setEnteredEmailTouched(true)\n  // }\n\n\n  const formSubmitHandler = event => {\n    event.preventDefault(); // setEnteredEmailTouched(true)\n\n    if (!enteredNameIsValid || !enteredEmailIsValid) {\n      console.log('disabled');\n      return;\n    }\n\n    resetNameInput();\n    resetEmailInput();\n    console.log('sucsess');\n  };\n\n  let nameInputClases = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  let emailInputClases = emailInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClases,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: changeNameInputHandler,\n        onBlur: nameInputBlurHandler,\n        value: nameInputValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClases,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: changeEmailInputHandler,\n        onBlur: emailInputBlurHandler,\n        value: emailInputValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Please enter valid email.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"nq7KhRyzYOKa/5CtKp2jaaZXYq4=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["C:/Users/Ico/Desktop/Education/UDEMY COURSES/REACT-COURSE/16-working-with-forms/code/01-starting-project/src/components/SimpleInput.js"],"names":["React","useState","useInput","SimpleInput","props","inputValue","nameInputValue","enteredValueIsValid","enteredNameIsValid","inputIsInvalid","nameInputIsInvalid","changeInputValueHandler","changeNameInputHandler","inputBlurHandler","emailInputBlurHandler","reset","resetNameInput","value","trim","emailInputValue","enteredEmailIsValid","emailInputIsInvalid","changeEmailInputHandler","nameInputBlurHandler","resetEmailInput","match","formIsValid","formSubmitHandler","event","preventDefault","console","log","nameInputClases","emailInputClases"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\r\nimport useInput from '../hooks/use-input'\r\n\r\nconst SimpleInput = (props) => {\r\n  const {\r\n    inputValue: nameInputValue,\r\n    enteredValueIsValid: enteredNameIsValid,\r\n    inputIsInvalid: nameInputIsInvalid,\r\n    changeInputValueHandler: changeNameInputHandler,\r\n    inputBlurHandler: emailInputBlurHandler,\r\n    reset: resetNameInput\r\n  } = useInput(value => value.trim() !== '')\r\n\r\n  const {\r\n    inputValue: emailInputValue,\r\n    enteredValueIsValid: enteredEmailIsValid,\r\n    inputIsInvalid: emailInputIsInvalid,\r\n    changeInputValueHandler: changeEmailInputHandler,\r\n    inputBlurHandler: nameInputBlurHandler,\r\n    reset: resetEmailInput\r\n  } = useInput(value => value.match(/^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/))\r\n\r\n  // const [nameInputValue, setNameInputValue] = useState('')\r\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false)\r\n  \r\n  // const [emailInputValue, setEmailInputValue] = useState('')\r\n  // const [enteredEmailTouched, setEnteredEmailTouched] = useState(false)\r\n\r\n  // const enteredNameIsValid = nameInputValue.trim() !== ''\r\n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched\r\n  \r\n  // const enteredEmailIsValid = emailInputValue.match(/^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/)\r\n  // const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched\r\n  \r\n  let formIsValid = false\r\n\r\n  if(enteredNameIsValid && enteredEmailIsValid) {\r\n    formIsValid = true\r\n  }\r\n\r\n\r\n  \r\n\r\n  // const changeEmailInputHandler = (event) => {\r\n  //   setEmailInputValue(event.target.value)\r\n  // }\r\n\r\n  // const emailInputBlurHandler = (event) => {\r\n  //   setEnteredEmailTouched(true)\r\n  // }\r\n\r\n  const formSubmitHandler = (event) => {\r\n    event.preventDefault()\r\n\r\n    // setEnteredEmailTouched(true)\r\n\r\n    if(!enteredNameIsValid || !enteredEmailIsValid) {\r\n      console.log('disabled')\r\n      return\r\n    }\r\n\r\n    resetNameInput()\r\n    resetEmailInput()\r\n\r\n    console.log('sucsess')\r\n  }\r\n\r\n  let nameInputClases = nameInputIsInvalid ? 'form-control invalid' : 'form-control' \r\n  let emailInputClases = emailInputIsInvalid ? 'form-control invalid' : 'form-control'\r\n\r\n  return (\r\n    <form onSubmit={formSubmitHandler}>\r\n      <div className={nameInputClases}>\r\n        <label htmlFor='name'>Your Name</label>\r\n        <input \r\n          type='text' \r\n          id='name' \r\n          onChange={changeNameInputHandler} \r\n          onBlur={nameInputBlurHandler}\r\n          value={nameInputValue}/>\r\n        {nameInputIsInvalid && <p className='error-text'>Name must not be empty.</p>}\r\n      </div>\r\n\r\n      <div className={emailInputClases}>\r\n        <label htmlFor='email'>Your Email</label>\r\n        <input \r\n          type='email' \r\n          id='email' \r\n          onChange={changeEmailInputHandler} \r\n          onBlur={emailInputBlurHandler}\r\n          value={emailInputValue}/>\r\n        {emailInputIsInvalid && <p className='error-text'>Please enter valid email.</p>}\r\n      </div>\r\n\r\n      <div className=\"form-actions\">\r\n        <button disabled={!formIsValid} >Submit</button>\r\n        \r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SimpleInput;\r\n"]},"metadata":{},"sourceType":"module"}