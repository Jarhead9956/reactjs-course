{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ico\\\\Desktop\\\\Education\\\\UDEMY COURSES\\\\REACT-COURSE\\\\react-complete-guide-code-10-side-effects-reducers-context-api\\\\code\\\\01-starting-project\\\\src\\\\contexts\\\\aurh-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport ThemeContext from './theme-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  isLoggedIn: false,\n  onLogin: (email, password) => {},\n  onLogout: () => {}\n});\nexport const AuthContextProvider = props => {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const themeCtx = useContext;\n  useEffect(() => {\n    const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn');\n\n    if (storedUserLoggedInInformation === '1') {\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem('isLoggedIn', '1');\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    localStorage.removeItem('isLoggedIn');\n    setIsLoggedIn(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogin: loginHandler,\n      onLogout: logoutHandler\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 7\n  }, this);\n};\n\n_s(AuthContextProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["C:/Users/Ico/Desktop/Education/UDEMY COURSES/REACT-COURSE/react-complete-guide-code-10-side-effects-reducers-context-api/code/01-starting-project/src/contexts/aurh-context.js"],"names":["React","useContext","useEffect","useState","ThemeContext","AuthContext","createContext","isLoggedIn","onLogin","email","password","onLogout","AuthContextProvider","props","setIsLoggedIn","themeCtx","storedUserLoggedInInformation","localStorage","getItem","loginHandler","setItem","logoutHandler","removeItem","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAqD,OAArD;AACA,OAAOC,YAAP,MAAyB,iBAAzB;;AAEA,MAAMC,WAAW,gBAAGL,KAAK,CAACM,aAAN,CAAoB;AACtCC,EAAAA,UAAU,EAAE,KAD0B;AAEtCC,EAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,QAAR,KAAqB,CAAE,CAFM;AAGtCC,EAAAA,QAAQ,EAAE,MAAM,CAAE;AAHoB,CAApB,CAApB;AAMA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAC1C,QAAM,CAACN,UAAD,EAAaO,aAAb,IAA8BX,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAMY,QAAQ,GAAGd,UAAjB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMc,6BAA6B,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAtC;;AAEA,QAAGF,6BAA6B,KAAK,GAArC,EAA0C;AAC1CF,MAAAA,aAAa,CAAC,IAAD,CAAb;AACC;AACJ,GANQ,EAMN,EANM,CAAT;;AAQA,QAAMK,YAAY,GAAG,CAACV,KAAD,EAAQC,QAAR,KAAqB;AACtC;AACA;AACAO,IAAAA,YAAY,CAACG,OAAb,CAAqB,YAArB,EAAmC,GAAnC;AACAN,IAAAA,aAAa,CAAC,IAAD,CAAb;AACH,GALD;;AAOA,QAAMO,aAAa,GAAG,MAAM;AACxBJ,IAAAA,YAAY,CAACK,UAAb,CAAwB,YAAxB;AACAR,IAAAA,aAAa,CAAC,KAAD,CAAb;AACL,GAHC;;AAKF,sBACI,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACHP,MAAAA,UAAU,EAAEA,UADT;AAEHC,MAAAA,OAAO,EAAEW,YAFN;AAGHR,MAAAA,QAAQ,EAAEU;AAHP,KADT;AAAA,cAMER,KAAK,CAACU;AANR;AAAA;AAAA;AAAA;AAAA,UADJ;AAUD,CAlCM;;GAAMX,mB;;KAAAA,mB;AAoCb,eAAeP,WAAf","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\r\nimport ThemeContext from './theme-context';\r\n\r\nconst AuthContext = React.createContext({\r\n  isLoggedIn: false,\r\n  onLogin: (email, password) => {},\r\n  onLogout: () => {}\r\n});\r\n\r\nexport const AuthContextProvider = (props) => {\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n    const themeCtx = useContext\r\n\r\n    useEffect(() => {\r\n        const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn')\r\n\r\n        if(storedUserLoggedInInformation === '1') {\r\n        setIsLoggedIn(true)\r\n        }\r\n    }, [])\r\n\r\n    const loginHandler = (email, password) => {\r\n        // We should of course check email and password\r\n        // But it's just a dummy/ demo anyways\r\n        localStorage.setItem('isLoggedIn', '1')\r\n        setIsLoggedIn(true);\r\n    };\r\n\r\n    const logoutHandler = () => {\r\n        localStorage.removeItem('isLoggedIn')\r\n        setIsLoggedIn(false);\r\n  };\r\n\r\n  return(\r\n      <AuthContext.Provider\r\n        value={{\r\n            isLoggedIn: isLoggedIn,\r\n            onLogin: loginHandler,\r\n            onLogout: logoutHandler\r\n        }}\r\n      >{props.children}\r\n      </AuthContext.Provider>\r\n  )\r\n}\r\n\r\nexport default AuthContext;"]},"metadata":{},"sourceType":"module"}