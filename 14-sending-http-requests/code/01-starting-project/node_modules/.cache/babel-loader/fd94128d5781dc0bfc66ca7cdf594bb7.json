{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ico\\\\Desktop\\\\Education\\\\UDEMY COURSES\\\\REACT-COURSE\\\\react-complete-guide-code-14-sending-http-requests\\\\code\\\\01-starting-project\\\\src\\\\App.js\";\nimport React, { useState } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const [moviesData, setMoviesData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const fetchMoviesHandler = () => {\n    setIsLoading(true);\n    fetch('https://swapi.dev/api/films/').then(response => {\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      return response.json();\n    }).then(data => {\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMoviesData(transformedMovies);\n      setIsLoading(false);\n    }).catch(e => {\n      setError(e.message);\n      console.log(e.message);\n    });\n  }; // const fetchMoviesHandler = async() => {\n  //   setIsLoading(true)\n  //   const response = await fetch('https://swapi.dev/api/films/')\n  //   const data = await response.json()\n  //   const transformedMovies = data.results.map(movieData => {\n  //     return {\n  //       id: movieData.episode_id,\n  //       title: movieData.title,\n  //       openingText: movieData.opening_crawl,\n  //       releaseDate: movieData.release_date,\n  //     }\n  //   })\n  //   setMoviesData(transformedMovies)\n  //   setIsLoading(false)\n  // }\n\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, \"No movies found\");\n\n  if (moviesData.length > 0) {\n    /*#__PURE__*/\n    React.createElement(MoviesList, {\n      movies: moviesData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 6\n      }\n    });\n  }\n\n  if (isLoading) {\n    /*#__PURE__*/\n    React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }\n    }, \"Loading...\");\n  }\n\n  if (error) {\n    /*#__PURE__*/\n    React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 5\n      }\n    }, error);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, content));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Ico/Desktop/Education/UDEMY COURSES/REACT-COURSE/react-complete-guide-code-14-sending-http-requests/code/01-starting-project/src/App.js"],"names":["React","useState","MoviesList","App","moviesData","setMoviesData","isLoading","setIsLoading","error","setError","fetchMoviesHandler","fetch","then","response","ok","Error","json","data","transformedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","catch","e","message","console","log","content","length"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMS,kBAAkB,GAAG,MAAM;AAC/BH,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAI,IAAAA,KAAK,CAAC,8BAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAI;AAChB,UAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACD;;AACD,aAAOF,QAAQ,CAACG,IAAT,EAAP;AACD,KANH,EAOGJ,IAPH,CAOSK,IAAD,IAAU;AACd,YAAMC,iBAAiB,GAAGD,IAAI,CAACE,OAAL,CAAaC,GAAb,CAAkBC,SAAD,IAAe;AACxD,eAAO;AACLC,UAAAA,EAAE,EAAED,SAAS,CAACE,UADT;AAELC,UAAAA,KAAK,EAAEH,SAAS,CAACG,KAFZ;AAGLC,UAAAA,WAAW,EAAEJ,SAAS,CAACK,aAHlB;AAILC,UAAAA,WAAW,EAAEN,SAAS,CAACO;AAJlB,SAAP;AAMD,OAPyB,CAA1B;AAQAvB,MAAAA,aAAa,CAACa,iBAAD,CAAb;AACAX,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAlBH,EAkBKsB,KAlBL,CAkBWC,CAAC,IAAI;AACZrB,MAAAA,QAAQ,CAACqB,CAAC,CAACC,OAAH,CAAR;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,CAAC,CAACC,OAAd;AACD,KArBH;AAsBD,GAxBD,CALa,CA+Bb;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAEA,MAAIG,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAd;;AAEA,MAAG9B,UAAU,CAAC+B,MAAX,GAAoB,CAAvB,EAA0B;AACvB;AAAA,wBAAC,UAAD;AAAY,MAAA,MAAM,EAAE/B,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACF;;AAED,MAAGE,SAAH,EAAc;AACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD;;AAED,MAAGE,KAAH,EAAU;AACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIA,KAAJ;AACD;;AAED,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAEE,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAUwB,OAAV,CAJF,CADF;AAQD;;AAED,eAAe/B,GAAf","sourcesContent":["import React, {useState} from 'react';\r\n\r\nimport MoviesList from './components/MoviesList';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [moviesData, setMoviesData] = useState([])\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [error, setError] = useState('')\r\n\r\n  const fetchMoviesHandler = () => {\r\n    setIsLoading(true)\r\n    fetch('https://swapi.dev/api/films/')\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('Something went wrong!');\r\n        }\r\n        return response.json()\r\n      })\r\n      .then((data) => {\r\n        const transformedMovies = data.results.map((movieData) => {\r\n          return {\r\n            id: movieData.episode_id,\r\n            title: movieData.title,\r\n            openingText: movieData.opening_crawl,\r\n            releaseDate: movieData.release_date,\r\n          };\r\n        });\r\n        setMoviesData(transformedMovies);\r\n        setIsLoading(false)\r\n      }).catch(e => {\r\n        setError(e.message)\r\n        console.log(e.message)\r\n      })\r\n  }\r\n\r\n  // const fetchMoviesHandler = async() => {\r\n  //   setIsLoading(true)\r\n  //   const response = await fetch('https://swapi.dev/api/films/')\r\n  //   const data = await response.json()\r\n\r\n  //   const transformedMovies = data.results.map(movieData => {\r\n  //     return {\r\n  //       id: movieData.episode_id,\r\n  //       title: movieData.title,\r\n  //       openingText: movieData.opening_crawl,\r\n  //       releaseDate: movieData.release_date,\r\n  //     }\r\n  //   })\r\n\r\n  //   setMoviesData(transformedMovies)\r\n  //   setIsLoading(false)\r\n  // }\r\n\r\n  let content = <p>No movies found</p>\r\n\r\n  if(moviesData.length > 0) {\r\n     <MoviesList movies={moviesData} />\r\n  }\r\n\r\n  if(isLoading) {\r\n    <p>Loading...</p>\r\n  }\r\n\r\n  if(error) {\r\n    <p>{error}</p>\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <section>\r\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\r\n      </section>\r\n      <section>{content}</section>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}