{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from \"react\"; // const useHttp = (method) => {\n//     const [isLoading, setIsLoading] = useState(false);\n//     const [error, setError] = useState(null);\n//     const [tasks, setTasks] = useState([]);\n//         const fetchTasks = useCallback( async (taskText) => {\n//             setIsLoading(true);\n//             setError(null);\n//             try {\n//             const response = await fetch(\n//                 'https://educationdb-97121.firebaseio.com/tasks.json'\n//             );\n//             if (!response.ok) {\n//                 throw new Error('Request failed!');\n//             }\n//             const data = await response.json();\n//             const loadedTasks = [];\n//             for (const taskKey in data) {\n//                 loadedTasks.push({ id: taskKey, text: data[taskKey].text });\n//             }\n//             setTasks(loadedTasks);\n//             } catch (err) {\n//             setError(err.message || 'Something went wrong!');\n//             }\n//             setIsLoading(false);\n//     }, []);\n//     const enterTaskHandler = async (taskText) => {\n//         setIsLoading(true);\n//         setError(null);\n//         try {\n//           const response = await fetch(\n//             'https://educationdb-97121.firebaseio.com/tasks.json',\n//             {\n//               method: 'POST',\n//               body: JSON.stringify({ text: taskText }),\n//               headers: {\n//                 'Content-Type': 'application/json',\n//               },\n//             }\n//           );\n//           if (!response.ok) {\n//             throw new Error('Request failed!');\n//           }\n//           const data = await response.json();\n//           const generatedId = data.name; // firebase-specific => \"name\" contains generated id\n//           const createdTask = { id: generatedId, text: taskText };\n//           setTasks((prevTasks => [...prevTasks, createdTask]))\n//         } catch (err) {\n//           setError(err.message || 'Something went wrong!');\n//         }\n//         setIsLoading(false);\n//     };\n//     useEffect(() => {\n//       fetchTasks();\n//     }, [fetchTasks]);\n//     // console.log(tasks)\n//     return {\n//         isLoading,\n//         error,\n//         tasks,\n//         fetchTasks,\n//         enterTaskHandler\n//     }\n// }\n\nconst useHttp = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const sendRequest = async (requestConfig, applyData) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      console.log(requestConfig.url);\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : 'GET',\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null,\n        headers: requestConfig.headers ? requestConfig.headers : {}\n      });\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n  };\n\n  return {\n    isLoading,\n    error,\n    sendRequest\n  };\n};\n\n_s(useHttp, \"vj++RuHna9NxFPGCY0p/mi1GZNM=\");\n\nexport default useHttp;","map":{"version":3,"sources":["C:/Users/Ico/Desktop/Education/UDEMY COURSES/REACT-COURSE/react-complete-guide-code-15-building-custom-react-hooks/code/04-onwards-to-a-more-realistic-example/src/components/hooks/use-http.js"],"names":["React","useState","useEffect","useCallback","useHttp","isLoading","setIsLoading","error","setError","sendRequest","requestConfig","applyData","console","log","url","response","fetch","method","body","JSON","stringify","headers","ok","Error","data","json","err","message"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,WAApC,QAAsD,OAAtD,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;;AAEA,QAAMQ,WAAW,GAAG,OAAOC,aAAP,EAAsBC,SAAtB,KAAoC;AACtDL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACFI,MAAAA,OAAO,CAACC,GAAR,CAAYH,aAAa,CAACI,GAA1B;AACA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACN,aAAa,CAACI,GAAf,EAAoB;AAC9CG,QAAAA,MAAM,EAAEP,aAAa,CAACO,MAAd,GAAuBP,aAAa,CAACO,MAArC,GAA8C,KADR;AAE9CC,QAAAA,IAAI,EAAER,aAAa,CAACQ,IAAd,GAAqBC,IAAI,CAACC,SAAL,CAAeV,aAAa,CAACQ,IAA7B,CAArB,GAA0D,IAFlB;AAG9CG,QAAAA,OAAO,EAAEX,aAAa,CAACW,OAAd,GAAwBX,aAAa,CAACW,OAAtC,GAAgD;AAHX,OAApB,CAA5B;;AAMA,UAAI,CAACN,QAAQ,CAACO,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAT,EAAnB;AACAd,MAAAA,SAAS,CAACa,IAAD,CAAT;AACD,KAdD,CAcE,OAAOE,GAAP,EAAY;AACZlB,MAAAA,QAAQ,CAACkB,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACDrB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GArBD;;AAuBA,SAAO;AACLD,IAAAA,SADK;AAELE,IAAAA,KAFK;AAGLE,IAAAA;AAHK,GAAP;AAKD,CAhCD;;GAAML,O;;AAkCN,eAAeA,OAAf","sourcesContent":["import React, {useState, useEffect, useCallback} from \"react\"\r\n\r\n// const useHttp = (method) => {\r\n//     const [isLoading, setIsLoading] = useState(false);\r\n//     const [error, setError] = useState(null);\r\n//     const [tasks, setTasks] = useState([]);\r\n\r\n//         const fetchTasks = useCallback( async (taskText) => {\r\n//             setIsLoading(true);\r\n//             setError(null);\r\n//             try {\r\n//             const response = await fetch(\r\n//                 'https://educationdb-97121.firebaseio.com/tasks.json'\r\n//             );\r\n    \r\n//             if (!response.ok) {\r\n//                 throw new Error('Request failed!');\r\n//             }\r\n    \r\n//             const data = await response.json();\r\n    \r\n//             const loadedTasks = [];\r\n    \r\n//             for (const taskKey in data) {\r\n//                 loadedTasks.push({ id: taskKey, text: data[taskKey].text });\r\n//             }\r\n    \r\n//             setTasks(loadedTasks);\r\n//             } catch (err) {\r\n//             setError(err.message || 'Something went wrong!');\r\n//             }\r\n//             setIsLoading(false);\r\n//     }, []);\r\n    \r\n    \r\n\r\n//     const enterTaskHandler = async (taskText) => {\r\n//         setIsLoading(true);\r\n//         setError(null);\r\n//         try {\r\n//           const response = await fetch(\r\n//             'https://educationdb-97121.firebaseio.com/tasks.json',\r\n//             {\r\n//               method: 'POST',\r\n//               body: JSON.stringify({ text: taskText }),\r\n//               headers: {\r\n//                 'Content-Type': 'application/json',\r\n//               },\r\n//             }\r\n//           );\r\n    \r\n//           if (!response.ok) {\r\n//             throw new Error('Request failed!');\r\n//           }\r\n    \r\n//           const data = await response.json();\r\n          \r\n//           const generatedId = data.name; // firebase-specific => \"name\" contains generated id\r\n//           const createdTask = { id: generatedId, text: taskText };\r\n//           setTasks((prevTasks => [...prevTasks, createdTask]))\r\n//         } catch (err) {\r\n//           setError(err.message || 'Something went wrong!');\r\n//         }\r\n//         setIsLoading(false);\r\n//     };\r\n    \r\n//     useEffect(() => {\r\n//       fetchTasks();\r\n//     }, [fetchTasks]);\r\n\r\n//     // console.log(tasks)\r\n\r\n//     return {\r\n//         isLoading,\r\n//         error,\r\n//         tasks,\r\n//         fetchTasks,\r\n//         enterTaskHandler\r\n//     }\r\n\r\n    \r\n// }\r\n\r\nconst useHttp = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const sendRequest = async (requestConfig, applyData) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      console.log(requestConfig.url)\r\n      const response = await fetch(requestConfig.url, {\r\n        method: requestConfig.method ? requestConfig.method : 'GET',\r\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null,\r\n        headers: requestConfig.headers ? requestConfig.headers : {},\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Request failed!');\r\n      }\r\n\r\n      const data = await response.json();\r\n      applyData(data)\r\n    } catch (err) {\r\n      setError(err.message || 'Something went wrong!');\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return {\r\n    isLoading,\r\n    error,\r\n    sendRequest\r\n  }\r\n}\r\n\r\nexport default useHttp"]},"metadata":{},"sourceType":"module"}