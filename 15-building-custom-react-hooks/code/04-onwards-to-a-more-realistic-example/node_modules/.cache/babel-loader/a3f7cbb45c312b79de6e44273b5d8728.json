{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from \"react\";\n\nconst useHttp = method => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [tasks, setTasks] = useState([]);\n  const fetchTasks = useCallback(async taskText => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://educationdb-97121.firebaseio.com/tasks.json');\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      const loadedTasks = [];\n\n      for (const taskKey in data) {\n        loadedTasks.push({\n          id: taskKey,\n          text: data[taskKey].text\n        });\n      }\n\n      setTasks(loadedTasks);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n  }, []);\n\n  const enterTaskHandler = async taskText => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://educationdb-97121.firebaseio.com/tasks.json', {\n        method: 'POST',\n        body: JSON.stringify({\n          text: taskText\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      const generatedId = data.name; // firebase-specific => \"name\" contains generated id\n\n      const createdTask = {\n        id: generatedId,\n        text: taskText\n      };\n      setTasks(prevTasks => [...prevTasks, createdTask]);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    fetchTasks();\n  }, [fetchTasks]); // console.log(tasks)\n\n  return {\n    isLoading,\n    error,\n    tasks,\n    fetchTasks,\n    enterTaskHandler\n  };\n};\n\n_s(useHttp, \"08cEC33SZusp6Jumjag6Cs6rhxA=\");\n\nexport default useHttp;","map":{"version":3,"sources":["C:/Users/Ico/Desktop/Education/UDEMY COURSES/REACT-COURSE/react-complete-guide-code-15-building-custom-react-hooks/code/04-onwards-to-a-more-realistic-example/src/components/hooks/use-http.js"],"names":["React","useState","useEffect","useCallback","useHttp","method","isLoading","setIsLoading","error","setError","tasks","setTasks","fetchTasks","taskText","response","fetch","ok","Error","data","json","loadedTasks","taskKey","push","id","text","err","message","enterTaskHandler","body","JSON","stringify","headers","generatedId","name","createdTask","prevTasks"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useCallback} from \"react\"\r\n\r\nconst useHttp = (method) => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [tasks, setTasks] = useState([]);\r\n\r\n        const fetchTasks = useCallback( async (taskText) => {\r\n            setIsLoading(true);\r\n            setError(null);\r\n            try {\r\n            const response = await fetch(\r\n                'https://educationdb-97121.firebaseio.com/tasks.json'\r\n            );\r\n    \r\n            if (!response.ok) {\r\n                throw new Error('Request failed!');\r\n            }\r\n    \r\n            const data = await response.json();\r\n    \r\n            const loadedTasks = [];\r\n    \r\n            for (const taskKey in data) {\r\n                loadedTasks.push({ id: taskKey, text: data[taskKey].text });\r\n            }\r\n    \r\n            setTasks(loadedTasks);\r\n            } catch (err) {\r\n            setError(err.message || 'Something went wrong!');\r\n            }\r\n            setIsLoading(false);\r\n    }, []);\r\n    \r\n    \r\n\r\n    const enterTaskHandler = async (taskText) => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n          const response = await fetch(\r\n            'https://educationdb-97121.firebaseio.com/tasks.json',\r\n            {\r\n              method: 'POST',\r\n              body: JSON.stringify({ text: taskText }),\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n              },\r\n            }\r\n          );\r\n    \r\n          if (!response.ok) {\r\n            throw new Error('Request failed!');\r\n          }\r\n    \r\n          const data = await response.json();\r\n          \r\n          const generatedId = data.name; // firebase-specific => \"name\" contains generated id\r\n          const createdTask = { id: generatedId, text: taskText };\r\n          setTasks((prevTasks => [...prevTasks, createdTask]))\r\n        } catch (err) {\r\n          setError(err.message || 'Something went wrong!');\r\n        }\r\n        setIsLoading(false);\r\n    };\r\n    \r\n    useEffect(() => {\r\n      fetchTasks();\r\n    }, [fetchTasks]);\r\n\r\n    // console.log(tasks)\r\n\r\n    return {\r\n        isLoading,\r\n        error,\r\n        tasks,\r\n        fetchTasks,\r\n        enterTaskHandler\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default useHttp"]},"metadata":{},"sourceType":"module"}